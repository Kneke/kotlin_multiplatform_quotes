apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'com.squareup.sqldelight'

group 'de.kneke'
version '1.0.0'

kotlin {
    jvm()
    android()
    js {
        browser {
        }
    }
    def iosFrameworkName = 'main'
    if (System.getenv('SDK_NAME')?.startsWith("iphoneos")) {
        iosArm64("ios") {
            binaries.framework {
                baseName = iosFrameworkName
            }
            compilations.each {
                it.kotlinOptions.freeCompilerArgs.add("-Xobjc-generics")
            }
        }
    } else {
        iosX64("ios") {
            binaries.framework {
                baseName = iosFrameworkName
            }
            compilations.each {
                it.kotlinOptions.freeCompilerArgs.add("-Xobjc-generics")
            }
        }
    }

    sourceSets {
        all {
            dependencies {
                implementation "org.kodein.di:kodein-di-core:$kodein_di_version"
                implementation "org.kodein.di:kodein-di-erased:$kodein_di_version"
            }
        }
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'

                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlinx_serialization_version"
                api "com.squareup.sqldelight:runtime:$sqldelight_version"

                api "io.ktor:ktor-client-core:$ktor_version"
                api "io.ktor:ktor-client-logging:$ktor_version"
                api "io.ktor:ktor-client-json:$ktor_version"
                api "io.ktor:ktor-client-serialization:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'

                api "io.mockk:mockk:$mockk_version"
                api "io.mockk:mockk-common:$mockk_version"
                api "org.amshove.kluent:kluent:$kluent_version"
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
                implementation "com.squareup.sqldelight:sqlite-driver:$sqldelight_version"


                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        commonClientMain {
            dependsOn commonMain
        }
        commonClientTest {
            dependsOn commonTest
        }
        androidMain {
            dependsOn commonClientMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
                implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"


                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        androidTest {
            dependsOn commonClientTest
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iosMain {
            dependsOn commonClientMain
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinx_serialization_version"
                implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-logging-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
            }
        }
        iosTest {
            dependsOn commonClientTest
        }
        jsMain {
            dependsOn commonClientMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlinx_serialization_version"

                implementation "io.ktor:ktor-client-js:$ktor_version"
                implementation "io.ktor:ktor-client-logging-js:$ktor_version"
                implementation "io.ktor:ktor-client-json-js:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-js:$ktor_version"
            }
        }
        jsTest {
            dependsOn commonClientTest
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
            }
        }
    }
}

android {
    compileSdkVersion android_compile_sdk_version as Integer
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
        }
    }
}

sqldelight {
    QuoteDatabase {
        packageName = "de.kneke.common.db"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("src/commonMain/sqldelight/databases")
    }
}

// Fix Bug for "Cannot inline bytecode built with JVM target 1.8 ..."
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.getByName("ios").binaries.getFramework(mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputDirectory }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

/*
def webFolder = new File(project.buildDir, "../../web/out/js/lib")
def jsCompilations = kotlin.targets.js.compilations

task populateWebFolder(dependsOn: [jsMainClasses]) {
    doLast {
        copy {
            from jsCompilations.main.output
            from kotlin.sourceSets.jsMain.resources.srcDirs
            jsCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into webFolder
        }
    }
}

jsJar.dependsOn(populateWebFolder)
*/